parameters:
  - name: buildConfiguration
    default: Release
  - name: publish
    type: boolean
    default: false
  - name: vsMarketplacePublisherToken
    type: string
    default: ''

stages:
- stage: Build
  displayName: Build

  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: Build
    displayName: Build extension and language server

    steps:
    - task: gitversion/setup@0
      displayName: 'Install GitVersion'

      inputs:
        versionSpec: 5.x

    - task: GitVersion/execute@0
      displayName: 'Determine build version'
      name: GitVersion

      env:
        BUILD_SOURCEBRANCH: '{{ iif( startsWith( variables['Build.SourceBranch'], 'refs/tags/v'), 'refs/heads/master', variables['Build.SourceBranch'] ) }}'

    - task: Npm@1
      displayName: 'Install npx'
      inputs:
        command: custom
        customCommand: 'install nx'
        verbose: false

    - task: Bash@3
      name: SemVer
      displayName: 'Capture SemVer properties'
      inputs:
        targetType: inline
        script: |
          echo "##vso[task.setvariable variable=version;isOutput=true]$(GitVersion.MajorMinorPatch)"
          echo "##vso[task.setvariable variable=longVersion;isOutput=true]$(GitVersion.MajorMinorPatch).$(GitVersion.BuildMetaData)"
          echo "##vso[task.setvariable variable=tag;isOutput=true]$(GitVersion.PreReleaseTag)"
          echo "SemVer.version='$(GitVersion.MajorMinorPatch)'"
          echo "SemVer.longVersion='$(GitVersion.MajorMinorPatch).$(GitVersion.BuildMetaData)'"
          echo "SemVer.tag='$(GitVersion.PreReleaseTag)'"

    - task: Npm@1
      displayName: 'Update extension package version'

      inputs:
        command: custom
        customCommand: 'version "$(GitVersion.MajorMinorPatch)" --git-tag-version false'

    - task: Npm@1
      displayName: 'npm install'

      inputs:
        command: ci
        workingDir: $(Build.SourcesDirectory)

    # TODO: Rather than build language server as part of extension CI, check the last commit in history for repo @ ./lib/server that is associated with a GitHub release and download the appropriate language server artifact from there.

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      
      inputs:
        command: 'restore'
        projects: './lib/server/MSBuildProjectTools.sln'
        restoreArguments: '/p:VersionPrefix="$(GitVersion.MajorMinorPatch).$(GitVersion.BuildMetaData)" /p:VersionSuffix="$(GitVersion.PreReleaseTag)"'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      
      inputs:
        command: 'build'
        projects: './lib/server/MSBuildProjectTools.sln'
        arguments: '--configuration "$(buildConfiguration)" /p:VersionPrefix="$(GitVersion.MajorMinorPatch).$(GitVersion.BuildMetaData)" /p:VersionSuffix="$(GitVersion.PreReleaseTag)"'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      
      inputs:
        command: 'test'
        projects: './lib/server/test/LanguageServer.Engine.Tests/LanguageServer.Engine.Tests.csproj'
        arguments: '--configuration "$(buildConfiguration)" /p:VersionPrefix="$(GitVersion.MajorMinorPatch).$(GitVersion.BuildMetaData)" /p:VersionSuffix="$(GitVersion.PreReleaseTag)"'

    - task: DotNetCoreCLI@2
      displayName: 'Publish language server'
      
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: './lib/server/src/LanguageServer/LanguageServer.csproj'
        arguments: '--configuration "$(buildConfiguration)" -o "./language-server" /p:VersionPrefix="$(GitVersion.MajorMinorPatch).$(GitVersion.BuildMetaData)" /p:VersionSuffix="$(GitVersion.PreReleaseTag)"'
        modifyOutputPath: false
        zipAfterPublish: false

    - task: Bash@3
      displayName: 'Build VS Code extension package (pre-release)'

      condition: ne( variables['GitVersion.PreReleaseTag'], '' )

      inputs:
        targetType: inline
        script: npx vsce package --pre-release -o "$(Build.ArtifactStagingDirectory)/msbuild-project-tools-vscode-$(GitVersion.MajorMinorPatch).vsix"

    - task: Bash@3
      displayName: 'Build VS Code extension package'

      condition: eq( variables['GitVersion.PreReleaseTag'], '' )

      inputs:
        targetType: inline
        script: npx vsce package -o "$(Build.ArtifactStagingDirectory)/msbuild-project-tools-vscode-$(GitVersion.MajorMinorPatch).vsix"
      

    - task: PublishBuildArtifacts@1
      displayName: 'Publish extension package'
      
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/msbuild-project-tools-vscode-$(GitVersion.MajorMinorPatch).vsix'
        ArtifactName: 'vscode-extension'
        publishLocation: 'Container'

    - task: GitHubRelease@1
      displayName: 'Create GitHub release from tag'

      condition: and( and( ${{ parameters.publish }}, succeeded() ), contains( variables['Build.SourceBranch'], 'refs/tags/v' ) )

      inputs:
        gitHubConnection: 'github.com_tintoy'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        tagPattern: '^v\d+\.\d+.\d+(-[A-Za-z0-9%\.]+)?$'
        releaseNotesFilePath: $(Build.SourcesDirectory)/CHANGELOG.md
        addChangeLog: false
        assets: '$(Build.ArtifactStagingDirectory)/*.vsix'
        assetUploadMode: replace

- stage: Publish
  displayName: Publish

  dependsOn: Build

  condition: and( ${{ parameters.publish }}, succeeded() )

  pool:
    vmImage: ubuntu-latest

  jobs:
  - deployment: Publish
    displayName: Publish extension package to VS Marketplace

    environment: VS Marketplace

    # Artifacts are automatically downloaded for deployment jobs.

    variables:
      semVerVersion: $[stageDependencies.Build.Build.outputs['SemVer.version']]
      semVerTag: $[stageDependencies.Build.Build.outputs['SemVer.tag']]

    strategy:
      runOnce:
        deploy:
          steps:
            - task: Npm@1
              displayName: 'Install npx'
              inputs:
                command: custom
                customCommand: 'install nx'
                verbose: false

            - task: Npm@1
              displayName: 'Install vsce'
              inputs:
                command: custom
                customCommand: 'install vsce'
                verbose: false

            - task: Bash@3
              displayName: 'Publish to VS Marketplace (pre-release)'

              condition: ne( variables.semVerTag, '' )
              
              env:
                VSCE_PAT: ${{ parameters.vsMarketplacePublisherToken }}

              inputs:
                targetType: inline
                script: |
                  VS_EXTENSION_PACKAGE_DIR="$(Pipeline.Workspace)/vscode-extension"
                  VS_EXTENSION_PACKAGE_FILE=$(ls -1 $VS_EXTENSION_PACKAGE_DIR/msbuild-project-tools-vscode-*.vsix | head -n 1)

                  npx vsce publish --packagePath $VS_EXTENSION_PACKAGE_FILE --pre-release

            - task: Bash@3
              displayName: 'Publish to VS Marketplace'

              condition: eq( variables.semVerTag, '' )
              
              env:
                VSCE_PAT: ${{ parameters.vsMarketplacePublisherToken }}

              inputs:
                targetType: inline
                script: |
                  VS_EXTENSION_PACKAGE_DIR="$(Pipeline.Workspace)/vscode-extension"
                  VS_EXTENSION_PACKAGE_FILE=$(ls -1 $VS_EXTENSION_PACKAGE_DIR/msbuild-project-tools-vscode-*.vsix | head -n 1)

                  npx vsce publish --packagePath $VS_EXTENSION_PACKAGE_FILE
