parameters:
  - name: buildConfiguration
    default: Release
  - name: publish
    type: boolean
    default: "false"
  - name: vsMarketplacePublisherToken
    type: string
    default: ""

stages:
  - stage: Versioning
    displayName: "Determine build version"

    jobs:
      - job: BuildVersion

        steps:
          - task: UseDotNet@2
            displayName: "Use .NET Core SDK from global.json"
            inputs:
              packageType: sdk
              useGlobalJson: true

          - task: Bash@3
            displayName: "Install local tools (.NET Core)"

            inputs:
              targetType: inline
              script: |
                echo "PATH=$PATH"
                dotnet tool restore --tool-manifest $(Build.SourcesDirectory)/.config/dotnet-tools.json

          - task: PythonScript@0
            name: SemVer
            displayName: "Capture SemVer properties"

            inputs:
              scriptSource: filePath
              scriptPath: $(Build.SourcesDirectory)/build/semver.py
              arguments: $(Build.SourcesDirectory)

  - stage: Build
    displayName: Build

    dependsOn: Versioning

    pool:
      vmImage: ubuntu-latest

    jobs:
      - job: Build
        displayName: Build extension and language server

        variables:
          ExtensionVersion: $[stageDependencies.Versioning.BuildVersion.outputs['SemVer.MajorMinorPatch']]
          VersionPrefix: $[stageDependencies.Versioning.BuildVersion.outputs['SemVer.VersionPrefix']]
          VersionSuffix: $[stageDependencies.Versioning.BuildVersion.outputs['SemVer.VersionSuffix']]
          IsPreRelease: $[stageDependencies.Versioning.BuildVersion.outputs['SemVer.IsPreRelease']]

        steps:
          - task: Npm@1
            displayName: "Install npx"
            inputs:
              command: custom
              customCommand: "install nx"
              verbose: false

          - task: Npm@1
            displayName: "Update extension package version"

            inputs:
              command: custom
              customCommand: 'version "$(ExtensionVersion)" --git-tag-version false'

          - task: Npm@1
            displayName: "npm install"

            inputs:
              command: ci
              workingDir: $(Build.SourcesDirectory)

          # TODO: Rather than build language server as part of extension CI, check the last commit in history for repo @ ./lib/server that is associated with a GitHub release and download the appropriate language server artifact from there.

          - task: UseDotNet@2
            displayName: "Use .NET Core SDK from global.json"
            inputs:
              packageType: sdk
              useGlobalJson: true

          - task: Bash@3
            displayName: "Install local tools (.NET Core)"

            inputs:
              targetType: inline
              script: |
                echo "PATH=$PATH"
                dotnet tool restore --tool-manifest $(Build.SourcesDirectory)/.config/dotnet-tools.json

          - task: DotNetCoreCLI@2
            displayName: "Restore packages"

            inputs:
              command: "restore"
              projects: "./lib/server/MSBuildProjectTools.sln"
              restoreArguments: '/p:VersionPrefix="$(VersionPrefix)" /p:VersionSuffix="$(VersionSuffix)"'

          - task: DotNetCoreCLI@2
            displayName: "Build solution"

            inputs:
              command: "build"
              projects: "./lib/server/MSBuildProjectTools.sln"
              arguments: '--configuration "$(buildConfiguration)" /p:VersionPrefix="$(VersionPrefix)" /p:VersionSuffix="$(VersionSuffix)"'

          - task: DotNetCoreCLI@2
            displayName: "Run tests"

            inputs:
              command: "test"
              projects: "./lib/server/test/LanguageServer.Engine.Tests/LanguageServer.Engine.Tests.csproj"
              arguments: '--configuration "$(buildConfiguration)" /p:VersionPrefix="$(VersionPrefix)" /p:VersionSuffix="$(VersionSuffix)"'

          - task: DotNetCoreCLI@2
            displayName: "Publish language server"

            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "./lib/server/src/LanguageServer/LanguageServer.csproj"
              arguments: '--configuration "$(buildConfiguration)" -o "./language-server" /p:VersionPrefix="$(VersionPrefix)" /p:VersionSuffix="$(VersionSuffix)"'
              modifyOutputPath: false
              zipAfterPublish: false

          - task: Bash@3
            displayName: "Build VS Code extension package (pre-release)"

            condition: eq( variables.IsPreRelease, 'true' )

            inputs:
              targetType: inline
              script: npx vsce package --pre-release -o "$(Build.ArtifactStagingDirectory)/msbuild-project-tools-vscode-$(ExtensionVersion).vsix"

          - task: Bash@3
            displayName: "Build VS Code extension package"

            condition: ne( variables.IsPreRelease, 'true' )

            inputs:
              targetType: inline
              script: npx vsce package -o "$(Build.ArtifactStagingDirectory)/msbuild-project-tools-vscode-$(ExtensionVersion).vsix"

          - task: PublishBuildArtifacts@1
            displayName: "Publish extension package"

            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/msbuild-project-tools-vscode-$(ExtensionVersion).vsix"
              ArtifactName: "vscode-extension"
              publishLocation: "Container"

          - task: GitHubRelease@1
            displayName: "Create GitHub release from tag"

            condition: and( and( ${{ parameters.publish }}, succeeded() ), contains( variables['Build.SourceBranch'], 'refs/tags/v' ) )

            inputs:
              gitHubConnection: "github.com_tintoy"
              repositoryName: "$(Build.Repository.Name)"
              action: "create"
              target: "$(Build.SourceVersion)"
              tagSource: "gitTag"
              tagPattern: '^v\d+\.\d+.\d+(-[A-Za-z0-9%\.]+)?$'
              releaseNotesFilePath: $(Build.SourcesDirectory)/CHANGELOG.md
              addChangeLog: false
              assets: "$(Build.ArtifactStagingDirectory)/*.vsix"
              assetUploadMode: replace

  - stage: Publish
    displayName: Publish

    dependsOn:
      - Versioning
      - Build

    condition: and( ${{ parameters.publish }}, succeeded() )

    pool:
      vmImage: ubuntu-latest

    jobs:
      - deployment: Publish
        displayName: Publish extension package to VS Marketplace

        environment: VS Marketplace

        # Artifacts are automatically downloaded for deployment jobs.

        variables:
          ExtensionVersion: $[stageDependencies.Versioning.BuildVersion.outputs['SemVer.MajorMinorPatch']]
          IsPreRelease: $[stageDependencies.Versioning.BuildVersion.outputs['SemVer.IsPreRelease']]

        strategy:
          runOnce:
            deploy:
              steps:
                - task: Npm@1
                  displayName: "Install npx"
                  inputs:
                    command: custom
                    customCommand: "install nx"
                    verbose: false

                - task: Npm@1
                  displayName: "Install vsce"
                  inputs:
                    command: custom
                    customCommand: "install vsce"
                    verbose: false

                - task: Bash@3
                  displayName: "Publish to VS Marketplace (pre-release)"

                  condition: eq( variables.IsPreRelease, 'true' )

                  env:
                    VSCE_PAT: ${{ parameters.vsMarketplacePublisherToken }}

                  inputs:
                    targetType: inline
                    script: |
                      VS_EXTENSION_PACKAGE_DIR="$(Pipeline.Workspace)/vscode-extension"
                      VS_EXTENSION_PACKAGE_FILE=$VS_EXTENSION_PACKAGE_DIR/msbuild-project-tools-vscode-$(ExtensionVersion).vsix

                      npx vsce publish --pre-release --packagePath $VS_EXTENSION_PACKAGE_FILE

                - task: Bash@3
                  displayName: "Publish to VS Marketplace"

                  condition: ne( variables.IsPreRelease, 'true' )

                  env:
                    VSCE_PAT: ${{ parameters.vsMarketplacePublisherToken }}

                  inputs:
                    targetType: inline
                    script: |
                      VS_EXTENSION_PACKAGE_DIR="$(Pipeline.Workspace)/vscode-extension"
                      VS_EXTENSION_PACKAGE_FILE=$VS_EXTENSION_PACKAGE_DIR/msbuild-project-tools-vscode-$(ExtensionVersion).vsix

                      npx vsce publish --packagePath $VS_EXTENSION_PACKAGE_FILE
